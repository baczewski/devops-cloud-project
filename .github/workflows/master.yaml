name: Master-CI

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

jobs:
  # Static style code analysis
  Use-Flake8:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.0

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install flake8
        run: pip install flake8

      - name: Run flake8
        uses: py-actions/flake8@v2

  Use-MyPy:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.0

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install MyPy
        run: pip install mypy

      - name: Run mypy
        uses: sasanquaneuf/mypy-github-action@releases/v1
        with:
          checkName: "Use-MyPy"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Use-Ruff:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Ruff
        uses: chartboost/ruff-action@v1

  Run-Python-Tests:
    name: Run Python Tests
    runs-on: ubuntu-latest

    needs: [Use-Flake8, Use-MyPy, Use-Ruff]

    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.0

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r src/requirements.txt

      - name: Run Tests
        run: |
          cd $GITHUB_WORKSPACE/src
          export MOVIE_API_KEY=${{ secrets.MOVIE_API_KEY }}
          python3 -m unittest tests.py

  # Static security code analysis
  Scan-With-SonarCloud:
    name: Scan with SonarCloud
    runs-on: ubuntu-latest

    needs: [Run-Python-Tests]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

  Scan-With-Snyk:
    name: Scan with Snyk
    runs-on: ubuntu-latest

    needs: [Run-Python-Tests]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Python
        run: sudo apt-get update -y && sudo apt-get install -y python3 python3-pip

      - name: Install Dependencies
        run: pip install -r src/requirements.txt

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk
        run: snyk test --file=src/requirements.txt
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  Scan-With-Grype:
    name: Scan with Grype
    runs-on: ubuntu-latest

    needs: [Run-Python-Tests]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - uses: anchore/scan-action@v3
        with:
          path: "."

  Create-And-Scan-Docker-Image:
    name: Create And Scan Docker Image
    runs-on: ubuntu-latest

    needs: [Scan-With-SonarCloud, Scan-With-Snyk, Scan-With-Grype]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/movie-api:${{ github.sha }} --build-arg MOVIE_API_KEY=${{ secrets.MOVIE_API_KEY }} .

      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/${{ secrets.DOCKER_USERNAME }}/movie-api:${{ github.sha }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

  Create-And-Upload-Docker-Image:
    name: Create And Upload Docker Image
    runs-on: ubuntu-latest

    needs: [Create-And-Scan-Docker-Image]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # The API key does leak, so it might be better to put it on AWS container and fetch api from there!
      - name: Build Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/movie-api:latest --build-arg MOVIE_API_KEY=${{ secrets.MOVIE_API_KEY }} .

      - name: Login to DockerHub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Upload Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/movie-api:latest

  Deploy-To-AWS-EKS:
    name: Deploy to AWS EKS cluster
    runs-on: ubuntu-latest

    needs: [Create-And-Upload-Docker-Image]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.2" # default is latest stable
        id: install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name movie-api --region eu-north-1

      - name: Add secret to secrets.yaml
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'eks/secrets.yaml'
          propertyPath: data['MOVIE_API_KEY']
          value: ${{ secrets. MOVIE_API_KEY }}
          commitChange: false

      - name: Deploy image to Amazon EKS
        run: |
          kubectl apply -f eks/secrets.yaml
          kubectl apply -f eks/aws-auth.yaml
          kubectl apply -f eks/deployment.yml
          kubectl apply -f eks/service.yml
